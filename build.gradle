plugins {
    id 'java'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'io.gatling.gradle' version "3.9.1"
    id 'io.qameta.allure' version '2.11.2'
    id "org.sonarqube" version "3.5.0.2730"
}

group 'com.tests'
version '1.0-SNAPSHOT'

project.sourceCompatibility = '1.17'
project.targetCompatibility = '1.17'

defaultTasks 'clean', 'test'

sourceSets {
    gatling {
        java.srcDir("src/test/java/load/")
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven { url 'https://jitpack.io' }
    maven { url "https://mvn.mchv.eu/repository/mchv/" }
}

ext {
    allureVersion = '2.12.1'
    junitVersion = '5.9.1'
    junitPlatformVersion = '1.9.1'
    slf4jVersion = '2.0.5'
    selenideVersion = '6.10.1'
    restAssuredVersion = '5.3.0'
}

dependencies {
    testImplementation("com.codeborne:selenide:${selenideVersion}")
    implementation 'io.qameta.allure:allure-java-commons:2.12.1'
    implementation 'io.qameta.allure:allure-commandline:2.12.1'
    implementation 'io.qameta.allure:allure-rest-assured:2.12.1'
    implementation 'io.qameta.allure:allure-junit5:2.12.1'
    implementation 'io.qameta.allure:allure-assertj:2.12.1'
    implementation 'io.qameta.allure:allure-selenide:2.12.1'
    testImplementation('org.assertj:assertj-core:3.23.1')
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")
    testImplementation("org.slf4j:slf4j-log4j12:${slf4jVersion}")
    implementation("org.apache.logging.log4j:log4j-core:2.19.0")
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testImplementation 'org.projectlombok:lombok:1.18.24'
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("io.rest-assured:rest-assured:${restAssuredVersion}")
    testImplementation("io.rest-assured:json-schema-validator:${restAssuredVersion}")

    testImplementation('io.gatling:gatling-core-java:3.9.0')
    testImplementation('io.gatling:gatling-http-java:3.9.0')
    // https://mvnrepository.com/artifact/io.gatling/gatling-recorder
    implementation 'io.gatling:gatling-recorder:3.9.0'
    // https://mvnrepository.com/artifact/io.gatling/gatling-app
    implementation 'io.gatling:gatling-app:3.9.0'
    // https://mvnrepository.com/artifact/com.github.automatedowl/allure-environment-writer
    implementation 'com.github.automatedowl:allure-environment-writer:1.0.0'
    testImplementation platform('it.tdlight:tdlight-java-bom:2.8.10.4')

    // do not specify the versions on the dependencies below!
    testImplementation 'it.tdlight:tdlight-java' // Use tdlight-java-8 if you are using java 8 to 16
    testImplementation 'it.tdlight:tdlight-natives-linux-amd64'
    testImplementation 'it.tdlight:tdlight-natives-windows-amd64'

}

test {
    systemProperties = System.properties as Map<String, ?>
    systemProperty("junit.jupiter.conditions.deactivate", "*")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", true)
    systemProperty("junit.jupiter.testinstance.lifecycle.default", "per_class")
    useJUnitPlatform()
}

testlogger {
    theme 'mocha-parallel'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showOnlySlow false
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

gatling {
    // WARNING: options below only work when logback config file isn't provided
    logLevel = 'ERROR' // logback root level
    logHttp = 'FAILURES' // set to 'ALL' for all HTTP traffic in TRACE, 'FAILURES' for failed HTTP traffic in DEBUG
    enterprise {
        // Enterprise Cloud (https://cloud.gatling.io/) configuration reference: https://gatling.io/docs/gatling/reference/current/extensions/gradle_plugin/#working-with-gatling-enterprise-cloud
        // Enterprise Self-Hosted configuration reference: https://gatling.io/docs/gatling/reference/current/extensions/gradle_plugin/#working-with-gatling-enterprise-self-hosted
    }
    simulations = {
        include "**first/*"
    }
}